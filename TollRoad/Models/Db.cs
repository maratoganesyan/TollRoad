// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TollRoad.Models;

public partial class Db : DbContext
{
    public Db()
    {
    }

    public Db(DbContextOptions<Db> options)
        : base(options)
    {
    }

    public virtual DbSet<Checkpoint> Checkpoints { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Gender> Genders { get; set; }

    public virtual DbSet<PhotoOfCheckpoint> PhotoOfCheckpoints { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Rout> Routs { get; set; }

    public virtual DbSet<StatusesOfTrip> StatusesOfTrips { get; set; }

    public virtual DbSet<Trip> Trips { get; set; }

    public virtual DbSet<Vehicle> Vehicles { get; set; }

    public virtual DbSet<VehicleCategory> VehicleCategories { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseLazyLoadingProxies();
        optionsBuilder.UseSqlServer("Data Source=DESKTOP-82PHLEE;Initial Catalog=TollRoads;Integrated Security=True;Encrypt=false");
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Checkpoint>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.Latitude).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Longitude).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.MaxHeightOfVehicleInMm).HasColumnName("MaxHeightOfVehicleInMM");
            entity.Property(e => e.MaxWidthOfVehicleInMm).HasColumnName("MaxWidthOfVehicleInMM");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Login).HasMaxLength(40);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.Password).HasMaxLength(40);
            entity.Property(e => e.Patronymic).HasMaxLength(50);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Surname)
                .IsRequired()
                .HasMaxLength(40);

            entity.HasOne(d => d.IdCheckpointNavigation).WithMany(p => p.Employees)
                .HasForeignKey(d => d.IdCheckpoint)
                .HasConstraintName("FK_Employees_Checkpoints");

            entity.HasOne(d => d.IdGenderNavigation).WithMany(p => p.Employees)
                .HasForeignKey(d => d.IdGender)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employees_Genders");

            entity.HasOne(d => d.IdRoleNavigation).WithMany(p => p.Employees)
                .HasForeignKey(d => d.IdRole)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employees_Roles");
        });

        modelBuilder.Entity<Gender>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.GenderName)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<PhotoOfCheckpoint>(entity =>
        {
            entity.HasKey(e => new { e.IdCheckpoint, e.NumberOfPhoto });

            entity.Property(e => e.Photo).IsRequired();

            entity.HasOne(d => d.IdCheckpointNavigation).WithMany(p => p.PhotoOfCheckpoints)
                .HasForeignKey(d => d.IdCheckpoint)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PhotoOfCheckpoints_Checkpoints");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(25);
        });

        modelBuilder.Entity<Rout>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DistanceInKm)
                .HasColumnType("decimal(5, 1)")
                .HasColumnName("DistanceInKM");
            entity.Property(e => e.Fare).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.IdFirstCheckpointNavigation).WithMany(p => p.RoutIdFirstCheckpointNavigations)
                .HasForeignKey(d => d.IdFirstCheckpoint)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Routs_Checkpoints");

            entity.HasOne(d => d.IdSecondCheckpointNavigation).WithMany(p => p.RoutIdSecondCheckpointNavigations)
                .HasForeignKey(d => d.IdSecondCheckpoint)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Routs_Checkpoints1");
        });

        modelBuilder.Entity<StatusesOfTrip>(entity =>
        {
            entity.ToTable("StatusesOfTrip");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(25);
        });

        modelBuilder.Entity<Trip>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.EndDateTimeOfTrip).HasColumnType("datetime");
            entity.Property(e => e.StartDateTimeOfTrip).HasColumnType("datetime");
            entity.Property(e => e.TotalPriceOfTrip).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.IdRouteNavigation).WithMany(p => p.Trips)
                .HasForeignKey(d => d.IdRoute)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Trips_Routs");

            entity.HasOne(d => d.IdVehicleNavigation).WithMany(p => p.Trips)
                .HasForeignKey(d => d.IdVehicle)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Trips_Vehicle");

            entity.HasOne(d => d.StatusOfTripNavigation).WithMany(p => p.Trips)
                .HasForeignKey(d => d.StatusOfTrip)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Trips_StatusesOfTrip");
        });

        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.ToTable("Vehicle");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.HeightInMm).HasColumnName("HeightInMM");
            entity.Property(e => e.StateNumber)
                .IsRequired()
                .HasMaxLength(9);
            entity.Property(e => e.WeightInKg).HasColumnName("WeightInKG");
            entity.Property(e => e.WidthInMm).HasColumnName("WidthInMM");

            entity.HasOne(d => d.CategoryOfVehicleNavigation).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.CategoryOfVehicle)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vehicle_VehicleCategories");
        });

        modelBuilder.Entity<VehicleCategory>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(60);
            entity.Property(e => e.FaceCoefficient).HasColumnType("decimal(3, 1)");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}